pipeline {
    agent { label 'docker-builder' }
    
    environment {
        DOCKER_HOST = "tcp://docker.local:2375"
        DOCKER_REGISTRY = "rbrandstaedter"
        LOG_LEVEL = "INFO"
        BUILD_NUMBER = "${BUILD_NUMBER}"
        TAG = "0.${BUILD_NUMBER}"
        DOCKERHUB_LOGIN = credentials('docker-login-private')
        GITHUB_AUTH_TOKEN = credentials('github_auth_token')
        git_branch = "${GIT_BRANCH}"
        BRANCH_NAME = git_branch.substring(git_branch.lastIndexOf('/') + 1, git_branch.length())
    }

    stages {
        stage('Build Docker Base Images') {
            steps {
                sh 'printenv'
                dir("${env.WORKSPACE}/src"){
                    sh label: 'Set up X-Builder', script: 'docker buildx rm crossbuilder && docker buildx create --name crossbuilder --platform linux/amd64,linux/arm/v6 && docker buildx ls && docker buildx use crossbuilder && docker buildx inspect --bootstrap'
                    sh label: 'Build Base Image', script: 'docker -H ${DOCKER_HOST} buildx build  --push --platform linux/amd64,linux/arm/v6 -t ${DOCKER_REGISTRY}/solarflow-control-baseimage:latest -f Dockerfile-baseimage .'
                }
            }
        }
    }
    post {
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true)
        }
    }
}